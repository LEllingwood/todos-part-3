{"version":3,"sources":["TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","react_default","a","createElement","className","this","props","completed","type","checked","onClick","handleToggleTodo","title","handleDeleteTodo","Component","TodoList","_this","todos","map","todo","src_TodoItem","key","id","App","state","todoList","todoIdThatWasClicked","event","newTodos","setState","handleDeleteCompletedTodos","filter","addNewTodo","keyCode","slice","newTodo","userId","Math","floor","random","target","value","push","console","log","_this2","placeholder","autoFocus","onKeyDown","Switch","Route","exact","path","render","src_TodoList","Link","to","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d507264.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TodoItem extends Component {\n    render() {\n      return (\n        <li className={this.props.completed ? \"completed\" : \"\"}>\n          <div className=\"view\">\n            <input\n              className=\"toggle\"\n              type=\"checkbox\"\n              checked={this.props.completed}\n              onClick={this.props.handleToggleTodo}\n            />\n            <label>{this.props.title}</label>\n            <button className=\"destroy\" onClick={this.props.handleDeleteTodo} />\n          </div>\n        </li>\n      );\n    }\n  }\n  \n  export default TodoItem;","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem\";\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <ul className=\"todo-list\">\n        {this.props.todos.map(todo => (\n          <TodoItem\n            title={todo.title}\n            key={todo.id}\n            completed={todo.completed}\n            handleToggleTodo={this.props.handleToggleTodo(todo.id)}\n            handleDeleteTodo={this.props.handleDeleteTodo(todo.id)}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default TodoList;\n\n// React.fragment would allow you to add things less than a div to get around the requirement that you only have one div.\n\n// the two ways to re-render the page is to: 1) change the state, and 2) ?\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport todoList from \"./todos.json\";\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport TodoList from \"./TodoList\";\nclass App extends Component {\n  state = { todos: todoList };\n\n  handleToggleTodo = todoIdThatWasClicked => event => {\n    const newTodos = this.state.todos.map(todo => {\n      if (todo.id === todoIdThatWasClicked) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  handleDeleteCompletedTodos = event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.completed === true) {\n        return false;\n      }\n      return true;\n    });\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  handleDeleteTodo = todoIdThatWasClicked => event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.id === todoIdThatWasClicked) {\n        return false;\n      }\n      return true;\n    });\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  addNewTodo = event => {\n    if (event.keyCode === 13) {\n      let newTodos = this.state.todos.slice(0);\n      let newTodo = {\n        userId: 1,\n        id: Math.floor(Math.random() * 30938409834) + 1,\n        title: event.target.value,\n        completed: false\n      };\n      newTodos.push(newTodo);\n      this.setState({\n        todos: newTodos\n      });\n      console.log(this.state);\n    }\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autoFocus\n            onKeyDown={this.addNewTodo}\n          />\n        </header>\n        <section className=\"main\">\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={props => (\n                <TodoList\n                  todos={this.state.todos}\n                  handleToggleTodo={this.handleToggleTodo}\n                  handleDeleteTodo={this.handleDeleteTodo}\n                />\n              )}\n            />\n            <Route\n              path={\"/active\"}\n              render={props => (\n                <TodoList\n                  todos={this.state.todos.filter(todo => !todo.completed)}\n                  handleToggleTodo={this.handleToggleTodo}\n                  handleDeleteTodo={this.handleDeleteTodo}\n                />\n              )}\n            />\n            <Route\n              path={\"/completed\"}\n              render={props => (\n                <TodoList\n                  todos={this.state.todos.filter(todo => todo.completed)}\n                  handleToggleTodo={this.handleToggleTodo}\n                  handleDeleteTodo={this.handleDeleteTodo}\n                />\n              )}\n            />\n          </Switch>\n        </section>\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>0</strong> item(s) left\n          </span>\n          <ul className=\"filters\">\n            <li>\n              <Link to=\"/\">All</Link>\n            </li>\n            <li>\n              <Link to=\"/active\">Active</Link>\n            </li>\n            <li>\n              <Link to=\"/completed\">Completed</Link>\n            </li>\n          </ul>\n          <button\n            className=\"clear-completed\"\n            onClick={this.handleDeleteCompletedTodos}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nconst Index = () =>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>;\n\nReactDOM.render(<Index />, document.getElementById('root'));\n// the first parameter of the ReactDome.render has to be a component\nserviceWorker.unregister();\n"],"sourceRoot":""}